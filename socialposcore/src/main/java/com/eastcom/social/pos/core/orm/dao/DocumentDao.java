package com.eastcom.social.pos.core.orm.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.eastcom.social.pos.core.orm.entity.Document;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DOCUMENT.
*/
public class DocumentDao extends AbstractDao<Document, String> {

    public static final String TABLENAME = "DOCUMENT";

    /**
     * Properties of entity Document.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "FILE_NAME");
        public final static Property FkFileId = new Property(2, String.class, "fkFileId", false, "FK_FILE_ID");
        public final static Property FileNo = new Property(3, Integer.class, "fileNo", false, "FILE_NO");
        public final static Property FkSignboardId = new Property(4, String.class, "fkSignboardId", false, "FK_SIGNBOARD_ID");
        public final static Property IsDownload = new Property(5, Integer.class, "isDownload", false, "IS_DOWNLOAD");
        public final static Property IdRead = new Property(6, Integer.class, "idRead", false, "ID_READ");
        public final static Property CreateDate = new Property(7, String.class, "createDate", false, "CREATE_DATE");
        public final static Property Download = new Property(8, String.class, "download", false, "DOWNLOAD");
        public final static Property ReadDate = new Property(9, String.class, "readDate", false, "READ_DATE");
    };


    public DocumentDao(DaoConfig config) {
        super(config);
    }
    
    public DocumentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DOCUMENT' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'FILE_NAME' TEXT," + // 1: fileName
                "'FK_FILE_ID' TEXT," + // 2: fkFileId
                "'FILE_NO' INTEGER," + // 3: fileNo
                "'FK_SIGNBOARD_ID' TEXT," + // 4: fkSignboardId
                "'IS_DOWNLOAD' INTEGER," + // 5: isDownload
                "'ID_READ' INTEGER," + // 6: idRead
                "'CREATE_DATE' TEXT," + // 7: createDate
                "'DOWNLOAD' TEXT," + // 8: download
                "'READ_DATE' TEXT);"); // 9: readDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DOCUMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Document entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        String fkFileId = entity.getFkFileId();
        if (fkFileId != null) {
            stmt.bindString(3, fkFileId);
        }
 
        Integer fileNo = entity.getFileNo();
        if (fileNo != null) {
            stmt.bindLong(4, fileNo);
        }
 
        String fkSignboardId = entity.getFkSignboardId();
        if (fkSignboardId != null) {
            stmt.bindString(5, fkSignboardId);
        }
 
        Integer isDownload = entity.getIsDownload();
        if (isDownload != null) {
            stmt.bindLong(6, isDownload);
        }
 
        Integer idRead = entity.getIdRead();
        if (idRead != null) {
            stmt.bindLong(7, idRead);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(8, createDate);
        }
 
        String download = entity.getDownload();
        if (download != null) {
            stmt.bindString(9, download);
        }
 
        String readDate = entity.getReadDate();
        if (readDate != null) {
            stmt.bindString(10, readDate);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Document readEntity(Cursor cursor, int offset) {
        Document entity = new Document( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fkFileId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // fileNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fkSignboardId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // isDownload
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // idRead
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // download
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // readDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Document entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFkFileId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileNo(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFkSignboardId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsDownload(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIdRead(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDownload(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReadDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Document entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Document entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
